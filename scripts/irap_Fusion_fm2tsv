#!/usr/bin/env Rscript3
#; -*- mode: R;-*-
# =========================================================
# Copyright 2012-2015,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    $Id: irap.txt Nuno Fonseca Fri Mar 15 01:39:46 2013$
# =========================================================

###############################################################
suppressPackageStartupMessages(library("optparse"))
suppressPackageStartupMessages(library(DESeq))
library(R2HTML)
library(brew)

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}

# specify our desired options in a list
#
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
source(paste(IRAP.DIR,"aux/R","irap_misc.R",sep="/"))
pdebug.enabled <- FALSE

#######################
usage <- "irap_Fusion_fm2tsv --tsv file [options]"
filenames <- c() ;#filenames that must exist (if defined)
option_list <- list(
  make_option(c("-v", "--verbose"), action="store_true", default=TRUE, help="Print extra output [default]"),
  make_option(c("-q", "--quietly"), action="store_false", dest="verbose", help="Print little output"),
  make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode"),
  make_option(c("-i", "--tsv"), type="character", dest="tsv_files", default=NULL,help="TSV file names with the FusionMap output"),
  make_option(c("-o", "--out"), type="character",default=NULL,help="Output file name prefix.")
)

# check multiple options values
multiple.options <- NULL

mandatory <- c("tsv_files","out")
opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)

pdebug.enabled <- opt$debug

tsv.files <- strsplit(opt$tsv_file,"[, ]")[[1]]
pdebug("Processing ",length(tsv.files)," FusionMap files")

read.fusionmap<-function(file) {
  t<-read.table(file,sep="\t",header=T,check.names=F)
  return(t)
}

fusionmap.reads<-function(fusionmap.data) {
 reads<-rowSums(fusionmap.data[,grep("SeedCount|RescuedCount",colnames(fusionmap.data))])
 id<-apply(X=fusionmap.data[,c("FusionGene","SplicePattern","Strand")],MARGIN=1,paste,collapse=":")
 m<-data.frame(list(Fusion=id,Reads=reads))
 colnames(m)<-c("Fusion",gsub(".UniqueCuttingPositionCount","",colnames(fusionmap.data)[2]))
 # check if the ids are unique
 if ( length(unique(id))!=length(id) ) {
   print("ERROR: non unique Fusion id")
   q(status=1)
 }
 return(m)
}

# check if the files exist
fe <- sapply(tsv.files,file.exists)
if (sum(!fe)!=0) {
  not.found <- names(fe[!fe])
  perror("File(s) not found...")
  perror(not.found)
  q(status=1)
}

# load the files
m<-fusionmap.reads(read.fusionmap(tsv.files[1]))
cur.file.idx <- 2
while ( cur.file.idx <= length(tsv.files) ) {
  pdebug("Processing ",tsv.files[cur.file.idx])
  m2 <- fusionmap.reads(read.fusionmap(tsv.files[cur.file.idx]))
  m <- merge(m,m2,by.x="Fusion",by.y="Fusion",all=TRUE,sort=F)
  cur.file.idx <- cur.file.idx+1
}

m[is.na(m)] <- 0
#
write.tsv(m,file=opt$out)
warnings()
q(status=0)
