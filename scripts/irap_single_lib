#!/bin/bash
VERSION=0.1d
#irap_single_lib -1 fastq_file [-2 fastq_file2] -c conf  [-s strand (first,second,both)] -m MEM -t threads -i irap_options [-0] [-h]
f1=
f2=
conf=
strand=both
mem=4000000000
threads=1
irap_options=
do_stage0=no
run_faster=n
# This script will not run with sudo
# http://unix.stackexchange.com/questions/38538/bash-dev-stderr-permission-denied
STDERR=/dev/stderr

#
function print_usage {
cat <<EOF
iRAP wrapper to process a single library
Usage: irap_single_lib -1 fastq_file [-2 fastq_file2] -c irap.configuration  [-s strand (first,second,both)] [-m MEM] [-t threads] [-i irap_options] [-0] [-h]

-0  - should be executed once for each
species/genome/annotation to generate the indexes and other files
necessary for the analysis.

-m MEM - value in bytes


EOF
}


function pinfo { 
    echo "[INFO: $*]"
}

function perror { 
    echo "[ERROR: $*]" > $STDERR
}

function pwarning { 
    echo "[WARNING: $*]" > $STDERR
}


function get_fileprefix {
    filename=`basename $1`
    filepref=`echo $filename|sed "s/.fastq.*//"`
    echo $filepref
}


# check paths - paths to the libraries should be relative although it will work
# with full paths
function check_path {

    path=$1
    var_name=$2
    if [ `echo "$1"|cut -b 1` == "/" ]; then
	pwarning "Relative path expected but a full path was  provided ($var_name)."
    fi
}

# two levels - 
# L1: ~1.7K folders
function get_folder {
    filename=`basename $1`
    filepref=`get_fileprefix $1`
    md5=`echo $filename|md5sum`
    fl=`echo $md5|cut -b 1,2`
    echo $fl/$filepref
}

function get_data_dir {
    # lookup in the conf file
    # 
    d=`echo $irap_options|grep "data_dir="`
    if [ "$d-" != "-" ]; then
	d=`echo $irap_options|sed -E "s/.*\s?data_dir=([^\s]+).*/\1/"`
    else
	d=`grep -E "^\s*data_dir=" $conf | cut -f 2 -d\=`
	if [ "$d-" == "-" ]; then
	    # check if it is already defined
	    if [ "$data_dir-" == "-" ]; then
		perror "Unable to find iRAP's data directory"
		exit 1
	    fi
	fi
    fi
    echo $d
}

function run_AND_timeIt {
    label=$1
    logfile=$2
    shift 2
    datetime=`date "+%F %R"`
    echo "CMD: $*" > /dev/stderr
    # label\tTime elapsed\tTime leapsed(Seconds)\taximum resident set size\t
    /usr/bin/time -o $logfile -a --format "$label\t%E\t%e\t%M\t$datetime" $*
    #echo "EXIT:$?" > /dev/stderr
}
################################################
# 
while getopts "1:2:c:s:m:t:i:h0f"  Option
do
    case $Option in
	0 ) do_stage0="yes";;
        1 ) f1=$OPTARG;;
        2 ) f2=$OPTARG;;# send all output to a log file
        c ) conf=$OPTARG;;# send all output to a log file
	s ) strand=$OPTARG;;# send all output to a log file
	m ) mem=$OPTARG;;
	f ) run_faster=y;;
	i ) irap_options=$OPTARG;;
        h ) print_usage; exit;;
    esac
done

set +e

if [ "$f1-" == "-" ]; then
    perror "ERROR: -1 parameter not provided" 
    print_usage
    exit 1
fi


if [ "$conf-" == "-" ]; then
    perror "ERROR: -c parameter not provided" 
    print_usage
    exit 1
fi

# Check if the files exist
if [ ! -e $f1 ] ; then
    perror "File $f1 not found"    
    exit 1
fi

if [ "$f2-" != "-" ] && [ ! -e $f2 ] ; then
    perror "File $f1 not found"    
    exit 1
fi


if [ ! -e $conf ] ; then
    perror "File $f1 not found"    
    exit 1
fi


if [ "$do_stage0-" == "yes-" ]; then
    pinfo "Running stage0 only"
fi


check_path $f1 "-1"
# FullPath to $f1
fp_f1=`readlink -f $f1`
f1_bn=`basename $f1`
if [ "$f2-" == "-" ]; then
    fp_f2=
else
    fp_f2=`readlink -f $f2`
    f2_bn=`basename $f2`
    check_path $f2 "-2"
fi

is_atlas_run=`grep -c "^atlas_run=" $conf`
name=
if [ "$is_atlas_run-" != "0-" ]; then
    species=`grep "^species=" $conf | head -n 1| cut -f 2 -d=`
    if [ "$species-" == "-" ]; then
	perror "species undefined"
	exit 1
    fi
    name="name=$species"
    irap_options="$irap_options $name"
fi

set -e

################################################
# place the tarball in the right folder
DATA_DIR=`get_data_dir`
pinfo "Data dir.=$DATA_DIR"
folder=`get_folder $f1`

TARGET_DIR=$DATA_DIR/raw_data/single_lib/$folder

mkdir -p $TARGET_DIR

################################################
# put the fastq files in the "expected" folder
pushd $TARGET_DIR > /dev/null 
pinfo "Unpacking fastq files to $TARGET_DIR"
if [ -e `basename $f1` ]; then
    pwarning "symlink in $TARGET_DIR already exists..."
    rm `basename $f1`    
fi
if [ ! -e `basename $fp_f1` ]; then
    ln -s $fp_f1 .
fi
rp_f2=
if [ "$f2-" != "-" ]; then
    if [ ! -e `basename $fp_f2` ]; then
	ln -s $fp_f2 .
    fi
    rp_f2=$folder/$f2_bn
fi

pinfo "FASTQ files in place"
popd > /dev/null 

################################################
odir=$PWD/out/`dirname $f1|cut -f 2- -d /`
fileprefix=`get_fileprefix $f1`
pinfo "Final files will be placed in $odir"
if [ ! -e  $odir ]; then
    mkdir -p $odir
fi
################################################
# TSV with the time and memory used
time_log_file=$odir/`get_fileprefix $f1`.time
pinfo "Time log file in $time_log_file"
touch $time_log_file


########
# Check if stage0 is ok
set +e 
irap conf=$conf data_dir=$DATA_DIR $libs lib.info=$INFO_FILE  $irap_options max_mem=$mem max_threads=$threads stage0 -n -q
if [ $? !=  0 ]; then
    if [ "$do_stage0-" == "yes-" ]; then
	pinfo "Running iRAP stage0"
	run_AND_timeIt "stage0" $time_log_file irap conf=$conf data_dir=$DATA_DIR $libs lib.info=$INFO_FILE  $irap_options max_mem=$mem max_threads=$threads stage0
    else
	perror "Stage0 incomplete - use -0 to run stage0"
	exit 1
    fi
fi

################################################
# run fastq_info on the file
set -e
pinfo "Validating FASTQ files..."
pinfo "FASTQ files: $f1 $f2"
# Move to the raw data top-level folder
pushd $DATA_DIR/raw_data/single_lib/ >/dev/null
do_validation=1
if [ $run_faster == y ] ; then
    if [ -e $folder/$f1_bn.info ]; then
	do_validation=0
    fi
fi

if [ $do_validation -eq 1 ]; then
    run_AND_timeIt "fastqInfo" $time_log_file fastq_info.sh  $folder/$f1_bn $rp_f2  > $folder/$f1_bn.info.tmp && mv $folder/$f1_bn.info.tmp $folder/$f1_bn.info
    if [ $? != 0 ] ; then
	perror "FASTQ validation failed"
	exit 1
    fi
    pinfo "Validation...done."
    libs=`grep -E "^#(se|pe)=" $folder/$f1_bn.info|sed "s/#//"`
    libname=`echo $libs|cut -f 2 -d=`
    libname_noprefix=`echo $libname |sed "s/^l//"`
    # Add strand information
    echo ${libname}_strand=$strand >> $folder/$f1_bn.info
    pinfo "Lib. details: $DATA_DIR/$folder/$f1_bn.info"
    sed -i -E "s/^#(se|pe)=/\1=/" $folder/$f1_bn.info		
    # RGId=
    echo "${libname}_rgid=" >> $folder/$f1_bn.info		
    echo "${libname}_shl=@CO\tiRAP:$VERSION\n@CO\tid:$libname_noprefix\n@CO\tAnalysis performed by http://www.ebi.ac.uk/about/people/robert-petryszak team at EMBL-EBI" >> $folder/$f1_bn.info		
else 
    pinfo "Validation skipped"
    libs=`grep -E "^#(se|pe)=" $folder/$f1_bn.info|sed "s/#//"`
    libname=`echo $libs|cut -f 2 -d=`
    libname_noprefix=`echo $libname |sed "s/^l//"`
fi
popd
INFO_FILE=$TARGET_DIR/$f1_bn.info

set +e
########################################################
pinfo "QC and filtering..."
run_AND_timeIt "iRAP-QC" $time_log_file  irap conf=$conf data_dir=$DATA_DIR $libs lib.info=$INFO_FILE $irap_options max_mem=$mem max_threads=$threads raw_folder=single_lib stage1
if [ $? != 0 ]; then
    perror "iRAP failed"
    exit 1
fi
pinfo "QC and filtering...complete."

pinfo "Aligning data..."
run_AND_timeIt "iRAP-Mapping" $time_log_file  irap conf=$conf data_dir=$DATA_DIR $libs lib.info=$INFO_FILE $irap_options max_mem=$mem max_threads=$threads raw_folder=single_lib stage2
if [ $? != 0 ]; then
    perror "iRAP failed"
    exit 1
fi
pinfo "Aligning data...complete."

pinfo "Quantification..."
run_AND_timeIt "iRAP-Quant" $time_log_file  irap conf=$conf data_dir=$DATA_DIR $libs lib.info=$INFO_FILE $irap_options max_mem=$mem max_threads=$threads raw_folder=single_lib stage3as
if [ $? != 0 ]; then
    perror "iRAP failed"
    exit 1
fi
pinfo "Quantification...complete."


pinfo "Mapping QC..."
# report files
REPORT_TSVs=`irap conf=$conf data_dir=$DATA_DIR $libs lib.info=$INFO_FILE $irap_options print_mapping_report_req  |tail -n 1`
run_AND_timeIt "iRAP-Mapping-QC" $time_log_file  irap conf=$conf data_dir=$DATA_DIR $libs lib.info=$INFO_FILE $irap_options max_mem=$mem max_threads=$threads raw_folder=single_lib $REPORT_TSVs
if [ $? != 0 ]; then
    perror "iRAP failed"
    exit 1
fi
pinfo "Mapping QC...complete."

set -e

# BAM
BAM=`irap conf=$conf data_dir=$DATA_DIR $libs lib.info=$INFO_FILE $irap_options print_stage2_files|tail -n 1`
if [ ! -e "$BAM" ]; then
    perror "Ooops: $BAM not found"
    exit 1
else
    # cp while in devel 
    #mv $BAM $odir/$f1_bn.bam
    cp $BAM $odir/$f1_bn.bam
    # add the headers to the BAM
    samtools view -H $odir/$f1_bn.bam > $odir/.header
    
    # create the CRAM file
    pinfo "CRAMMING..."
    run_AND_timeIt "iRAP-CRAM" $time_log_file  irap conf=$conf data_dir=$DATA_DIR $libs lib.info=$INFO_FILE $irap_options max_mem=$mem max_threads=$threads raw_folder=single_lib $odir/$f1_bn.cram
    if [ $? != 0 ]; then
	perror "Generation of CRAM file failed"
	exit 1
    fi
    pinfo "CRAMMING...done."
    CRAM_FILE=`dirname $odir/$f1_bn`/$libname_noprefix.cram    
    mv $odir/$f1_bn.cram $CRAM_FILE
    pinfo "CRAM_FILE created"
    # generate the md5sum
    md5sum $CRAM_FILE > $CRAM_FILE.tmp.md5 && mv $CRAM_FILE.tmp.md5 $CRAM_FILE.md5
    pinfo "$CRAM_FILE.md5 created"
    rm -f $odir/$f1_bn.bam
    pinfo "BAM file deleted"
fi

# 
TSVs=`irap conf=$conf data_dir=$DATA_DIR $libs lib.info=$INFO_FILE $irap_options print_stage3_s_targets  |tail -n 1`

pinfo "Moving the following files to $odir: $TSVs $REPORT_TSVs"
cp $TSVs $odir
#mv $TSVs $odir

# report files
#REPORT_TSVs=`irap conf=$conf data_dir=$DATA_DIR $libs lib.info=$INFO_FILE $irap_options print_mapping_report_req  |tail -n 1`
mv $REPORT_TSVs $odir
# rename the files (remove the l prefix added by fastq_info)

rename $libname $libname_noprefix `dirname $odir/$f1_bn`/$libname*

# copy the info file
cp $INFO_FILE $odir
# 
# test1/tophat1/htseq2/genes.rpkm.deseq.tsv.tmp
pinfo "Files in $odir"
pinfo "All done."
exit 0
